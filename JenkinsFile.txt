pipeline {
    agent any

    tools {
        msbuild 'MSBuild_2022'
        dockerTool 'Docker'
    }

    environment {
        DOCKER_IMAGE = 'enhanced-reaction-controller:latest'
        SONARQUBE_URL = 'http://localhost:8080' // Replace with your actual SonarQube server URL
    }

    stages {
        stage('Build') {
            steps {
                script {
                    bat 'msbuild "Enhanced Reaction Controller/Enhanced Reaction Controller.csproj" /p:Configuration=Release'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    bat 'vstest.console.exe "Enhanced Reaction Controller/bin/Release/net5.0/Enhanced Reaction Controller.dll"'
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        bat 'dotnet sonarscanner begin /k:"EnhancedReactionController" /d:sonar.host.url=$SONARQUBE_URL /d:sonar.login=$SONAR_AUTH_TOKEN'
                        bat 'msbuild "Enhanced Reaction Controller/Enhanced Reaction Controller.csproj" /p:Configuration=Release'
                        bat 'dotnet sonarscanner end /d:sonar.login=$SONAR_AUTH_TOKEN'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                    docker.image(DOCKER_IMAGE).run('-d -p 8080:80')
                }
            }
        }

        stage('Release') {
            steps {
                script {
                    echo 'Simulating release stage - deploying to production environment...'
                    docker.image(DOCKER_IMAGE).run('-d -p 8080:80 --name enhanced-reaction-controller-prod')
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    echo 'Simulating monitoring and alerting setup...'
                }
            }
        }
    }
    
    post {
        always {
            node {
                cleanWs()
            }
        }
    }
}